import logging
import os
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import InputMediaPhoto, ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from PIL import Image
from io import BytesIO
from dotenv import load_dotenv
from flask import Flask, request # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç Flask —Ç–∞ request
import asyncio # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç asyncio

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É .env
load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ ID –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
# –†–æ–∑–¥—ñ–ª—è—î–º–æ ADMIN_CHAT_ID, —è–∫—â–æ —ó—Ö –¥–µ–∫—ñ–ª—å–∫–∞, —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ int
ADMIN_IDS = [int(admin_id) for admin_id in os.getenv("ADMIN_CHAT_ID").split(',')]
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
MONOBANK_CARD_NUMBER = os.getenv("MONOBANK_CARD_NUMBER")
DATABASE_URL = os.getenv("DATABASE_URL")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db_pool = None # –ü—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö

# –ö–ª–∞—Å —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
class CreateProduct(StatesGroup):
    Name = State()
    Price = State()
    Photos = State()
    Location = State()
    Description = State()
    Delivery = State()
    Confirm = State()

# –ö–ª–∞—Å —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏
class EditPrice(StatesGroup):
    NewPrice = State()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async def init_db():
    global db_pool
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ PostgreSQL
    db_pool = await asyncpg.create_pool(DATABASE_URL)
    async with db_pool.acquire() as conn:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é products, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS products (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                username TEXT,
                name TEXT,
                price TEXT,
                photos TEXT[],
                location TEXT,
                description TEXT,
                delivery TEXT,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                repost_count INT DEFAULT 0,
                channel_message_id BIGINT DEFAULT NULL
            );
        """)
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
async def save_product(data):
    async with db_pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO products (user_id, username, name, price, photos, location, description, delivery)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        """, data['user_id'], data['username'], data['name'], data['price'], data['photos'], data['location'], data['description'], data['delivery'])
        logging.info(f"–¢–æ–≤–∞—Ä '{data['name']}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é
async def get_next_pending_product():
    async with db_pool.acquire() as conn:
        return await conn.fetchrow("SELECT * FROM products WHERE status = 'pending' ORDER BY created_at ASC LIMIT 1")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–æ–≤–∞—Ä—É
async def update_product_status(product_id, status):
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE products SET status = $1 WHERE id = $2", status, product_id)
        logging.info(f"–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É {product_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{status}'.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ
async def update_channel_message_id(product_id, message_id):
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE products SET channel_message_id = $1 WHERE id = $2", message_id, product_id)
        logging.info(f"ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message_id}.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π –ø—ñ—Å–ª—è –ø–æ–≤–æ—Ä–æ—Ç—É
async def update_rotated_photos(product_id, new_file_ids):
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE products SET photos = $1 WHERE id = $2", new_file_ids, product_id)
        logging.info(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –ø–æ–≤–æ—Ä–æ—Ç—É.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def rotate_photos_and_notify(product):
    new_file_ids = []
    for file_id in product['photos']:
        try:
            file = await bot.get_file(file_id)
            file_path = file.file_path
            photo_bytes = await bot.download_file(file_path)
            image = Image.open(BytesIO(photo_bytes.read())).rotate(-90, expand=True) # –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90 –≥—Ä–∞–¥—É—Å—ñ–≤ –ø—Ä–æ—Ç–∏ –≥–æ–¥–∏–Ω–Ω–∏–∫–æ–≤–æ—ó —Å—Ç—Ä—ñ–ª–∫–∏
            buf = BytesIO()
            buf.name = 'rotated.jpg'
            image.save(buf, format='JPEG')
            buf.seek(0)
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–π file_id
            msg = await bot.send_photo(product['user_id'], buf, caption="üîÅ –ü–æ–≤–µ—Ä–Ω—É—Ç–µ —Ñ–æ—Ç–æ")
            new_file_ids.append(msg.photo[-1].file_id)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç—ñ —Ñ–æ—Ç–æ {file_id} –¥–ª—è —Ç–æ–≤–∞—Ä—É {product['id']}: {e}")
            # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, –∑–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∞—Ä–∏–π file_id
            new_file_ids.append(file_id)
    await update_rotated_photos(product['id'], new_file_ids)
    await bot.send_message(product['user_id'],
                           "üîÑ –í–∞—à —Ç–æ–≤–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ.\nüì∏ –§–æ—Ç–æ –±—É–ª–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∞ –ø–æ–¥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.")
    await update_product_status(product['id'], "rotated")
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {product['user_id']} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø—Ä–æ –ø–æ–≤–æ—Ä–æ—Ç —Ñ–æ—Ç–æ.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏")
    keyboard.add("üìñ –ü—Ä–∞–≤–∏–ª–∞")
    await message.answer("üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"
@dp.message_handler(lambda m: m.text == "üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
async def add_product(message: types.Message):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:", reply_markup=types.ReplyKeyboardRemove())
    await CreateProduct.Name.set()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–æ—á–∞–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä.")

# –ö—Ä–æ–∫ 1: –í–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—É
@dp.message_handler(state=CreateProduct.Name)
async def set_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üí∞ –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (–≥—Ä–Ω, $ –∞–±–æ –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞):")
    await CreateProduct.Price.set()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É: {message.text}")

# –ö—Ä–æ–∫ 2: –í–≤–µ–¥–µ–Ω–Ω—è —Ü—ñ–Ω–∏
@dp.message_handler(state=CreateProduct.Price)
async def set_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text, photos=[])
    await message.answer("üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 10 —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É (–ø–æ –æ–¥–Ω–æ–º—É):")
    await CreateProduct.Photos.set()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤ —Ü—ñ–Ω—É: {message.text}")

# –ö—Ä–æ–∫ 3: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ
@dp.message_handler(content_types=types.ContentType.PHOTO, state=CreateProduct.Photos)
async def upload_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    if len(photos) >= 10:
        await message.answer("üì∑ –í–∏ –≤–∂–µ –¥–æ–¥–∞–ª–∏ –º–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ. –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å.")
        await CreateProduct.Location.set()
        return
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    await message.answer(f"‚úÖ –§–æ—Ç–æ {len(photos)} –¥–æ–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è.")
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –¥–æ–¥–∞–≤ —Ñ–æ—Ç–æ. –í—Å—å–æ–≥–æ —Ñ–æ—Ç–æ: {len(photos)}")

# –ö—Ä–æ–∫ 3: –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ
@dp.message_handler(lambda m: m.text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ" or m.text == "-", state=CreateProduct.Photos)
async def skip_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    if not photos:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É.")
        return
    await message.answer("üìç –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–±–æ '-' —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:")
    await CreateProduct.Location.set()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–≤ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ.")

# –ö—Ä–æ–∫ 4: –í–≤–µ–¥–µ–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
@dp.message_handler(state=CreateProduct.Location)
async def set_location(message: types.Message, state: FSMContext):
    location = message.text if message.text != "-" else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    await state.update_data(location=location)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")
    await CreateProduct.Description.set()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è: {location}")

# –ö—Ä–æ–∫ 5: –í–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É
@dp.message_handler(state=CreateProduct.Description)
async def set_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–ù–∞–ª–æ–∂–∫–∞ –£–∫—Ä–ø–æ—à—Ç–∞", "–ù–∞–ª–æ–∂–∫–∞ –ù–æ–≤–∞ –ø–æ—à—Ç–∞")
    await message.answer("üöö –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)
    await CreateProduct.Delivery.set()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –¥–æ—Å—Ç–∞–≤–∫—É: {message.text}")

# –ö—Ä–æ–∫ 6: –í–∏–±—ñ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(state=CreateProduct.Delivery)
async def set_delivery(message: types.Message, state: FSMContext):
    await state.update_data(delivery=message.text)
    data = await state.get_data()
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    confirm_text = (
        f"üì¶ –ù–∞–∑–≤–∞: {data['name']}\n"
        f"üí∞ –¶—ñ–Ω–∞: {data['price']}\n"
        f"üìç –õ–æ–∫–∞—Ü—ñ—è: {data['location']}\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery']}\n"
        f"üìù –û–ø–∏—Å: {data['description']}\n\n"
        f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é? (–¢–∞–∫/–ù—ñ)"
    )
    await message.answer(confirm_text, reply_markup=types.ReplyKeyboardRemove())
    await CreateProduct.Confirm.set()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–±—Ä–∞–≤ –¥–æ—Å—Ç–∞–≤–∫—É: {message.text}")

# –ö—Ä–æ–∫ 7: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
@dp.message_handler(state=CreateProduct.Confirm)
async def confirm_post(message: types.Message, state: FSMContext):
    if message.text.lower() != "—Ç–∞–∫":
        await message.answer("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é 'üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä'.",
                             reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏", "üìñ –ü—Ä–∞–≤–∏–ª–∞"))
        await state.finish()
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —Å–∫–∞—Å—É–≤–∞–≤ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.")
        return

    data = await state.get_data()
    product = data.copy()
    product['user_id'] = message.from_user.id
    product['username'] = message.from_user.username or f"id{message.from_user.id}" # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID, —è–∫—â–æ —é–∑–µ—Ä–Ω–µ–π–º –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
    await save_product(product)
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä \"{data['name']}\" –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –û—á—ñ–∫—É–π—Ç–µ!",
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏", "üìñ –ü—Ä–∞–≤–∏–ª–∞"))
    await state.finish()
    logging.info(f"–¢–æ–≤–∞—Ä '{data['name']}' –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
    moderator_product_info = (
        f"üÜï –ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!\n\n"
        f"üì¶ –ù–∞–∑–≤–∞: {product['name']}\n"
        f"üí∞ –¶—ñ–Ω–∞: {product['price']}\n"
        f"üìù –û–ø–∏—Å: {product['description']}\n"
        f"üìç –õ–æ–∫–∞—Ü—ñ—è: {product['location']}\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {product['delivery']}\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: @{product['username']} (ID: {product['user_id']})"
    )
    moderator_keyboard = InlineKeyboardMarkup(row_width=2)
    # –ó–º—ñ–Ω–µ–Ω–æ callback_data, —â–æ–± –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ ID —Ç–æ–≤–∞—Ä—É, –∞ –Ω–µ —ñ–º'—è, –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—é
    moderator_keyboard.add(
        InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve:{product['user_id']}:{product['name']}"),
        InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{product['user_id']}:{product['name']}")
    )
    moderator_keyboard.add(
        InlineKeyboardButton("üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ñ–æ—Ç–æ", callback_data=f"rotate:{product['user_id']}:{product['name']}")
    )

    media_group = [InputMediaPhoto(file_id) for file_id in product['photos']]
    if media_group:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        try:
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –º–µ–¥—ñ–∞–≥—Ä—É–ø—É, —è–∫—â–æ —î —Ñ–æ—Ç–æ
            await bot.send_media_group(ADMIN_IDS[0], media_group) # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–µ—Ä—à–æ–º—É –∞–¥–º—ñ–Ω—É
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –º–µ–¥—ñ–∞–≥—Ä—É–ø–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: {e}")
            await bot.send_message(ADMIN_IDS[0], "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—Ä—É—á–Ω—É.")
    
    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, moderator_product_info, reply_markup=moderator_keyboard)
        logging.info(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {admin_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä.")


# –û–±—Ä–æ–±–Ω–∏–∫ –¥—ñ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏, –í—ñ–¥—Ö–∏–ª–∏—Ç–∏, –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ñ–æ—Ç–æ)
@dp.callback_query_handler(lambda c: c.data.startswith(("approve:", "reject:", "rotate:")))
async def moderator_action(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    action, user_id_str, product_name = callback.data.split(":", 2)
    user_id = int(user_id_str)

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î user_id —Ç–∞ product_name
    async with db_pool.acquire() as conn:
        product = await conn.fetchrow("SELECT * FROM products WHERE user_id = $1 AND name = $2 AND status = 'pending' ORDER BY created_at DESC LIMIT 1", user_id, product_name)

    if not product:
        await callback.answer("–¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –Ω–∞—Ç–∏—Å–∫–∞–Ω—å
        try:
            await callback.message.edit_text(f"–¶–µ–π —Ç–æ–≤–∞—Ä ({product_name}) –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return

    if action == "approve":
        media = [InputMediaPhoto(photo) for photo in product['photos']]
        caption = (
            f"üì¶ –ù–∞–∑–≤–∞: {product['name']}\n"
            f"üí∞ –¶—ñ–Ω–∞: {product['price']}\n"
            f"üìç –î–æ—Å—Ç–∞–≤–∫–∞: {product['delivery']}\n"
            f"üìù –û–ø–∏—Å: {product['description']}\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: @{product['username']}"
        )
        if media:
            media[0].caption = caption
            media[0].parse_mode = ParseMode.HTML
            try:
                # –ü—É–±–ª—ñ–∫—É—î–º–æ —Ç–æ–≤–∞—Ä –≤ –∫–∞–Ω–∞–ª—ñ
                sent_messages = await bot.send_media_group(CHANNEL_ID, media)
                if sent_messages:
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∫–∞–Ω–∞–ª—ñ"
                    await update_channel_message_id(product['id'], sent_messages[0].message_id)
                await bot.send_message(product['user_id'], f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä \"{product['name']}\" –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
                await update_product_status(product['id'], "approved")
                await callback.answer("–¢–æ–≤–∞—Ä –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
                await callback.message.edit_text(f"‚úÖ –¢–æ–≤–∞—Ä \"{product['name']}\" –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
                logging.info(f"–¢–æ–≤–∞—Ä {product['id']} –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ.")
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É {product['id']} –≤ –∫–∞–Ω–∞–ª—ñ: {e}")
                await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É.", show_alert=True)
        else:
            await callback.answer("–ù–µ–º–∞—î —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.", show_alert=True)
            await callback.message.edit_text(f"‚ùå –¢–æ–≤–∞—Ä \"{product['name']}\" –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π –±–µ–∑ —Ñ–æ—Ç–æ.")


    elif action == "reject":
        await bot.send_message(product['user_id'], f"‚ùå –í–∞—à —Ç–æ–≤–∞—Ä \"{product['name']}\" –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª–∞.")
        await update_product_status(product['id'], "rejected")
        await callback.answer("–¢–æ–≤–∞—Ä –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        await callback.message.edit_text(f"‚ùå –¢–æ–≤–∞—Ä \"{product['name']}\" –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        logging.info(f"–¢–æ–≤–∞—Ä {product['id']} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")

    elif action == "rotate":
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è —Ä–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
        await callback.answer("–í—ñ–¥–∫—Ä–∏–≤–∞—é —Ä–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ.")
        await rotate_photos_and_notify(product)
        await callback.message.edit_text(f"üîÑ –§–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É \"{product['name']}\" –ø–æ–≤–µ—Ä–Ω—É—Ç–æ. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ.")
        logging.info(f"–§–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product['id']} –ø–æ–≤–µ—Ä–Ω—É—Ç–æ.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–≤–∏–ª–∞"
@dp.message_handler(lambda m: m.text == "üìñ –ü—Ä–∞–≤–∏–ª–∞")
async def show_rules(message: types.Message):
    await message.answer(
        f"üìå –£–º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è:\n\n"
        f"* üßæ –ü–æ–∫—É–ø–µ—Ü—å –æ–ø–ª–∞—á—É—î –¥–æ—Å—Ç–∞–≤–∫—É.\n"
        f"* üí∞ –ü—Ä–æ–¥–∞–≤–µ—Ü—å —Å–ø–ª–∞—á—É—î –∫–æ–º—ñ—Å—ñ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏: 10%\n"
        f"* üí≥ –û–ø–ª–∞—Ç–∞ –∫–æ–º—ñ—Å—ñ—ó –Ω–∞ Monobank: {MONOBANK_CARD_NUMBER}"
    )
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ –ø—Ä–∞–≤–∏–ª–∞.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ—ó —Ç–æ–≤–∞—Ä–∏"
@dp.message_handler(lambda m: m.text == "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏")
async def my_products(message: types.Message):
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT * FROM products WHERE user_id = $1 ORDER BY created_at DESC", message.from_user.id)
        if not rows:
            await message.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä', —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.")
            logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–µ –º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
            return

        for row in rows:
            status_emoji = {
                "pending": "‚è≥",
                "approved": "‚úÖ",
                "rejected": "‚ùå",
                "sold": "‚úÖ",
                "rotated": "üîÑ"
            }.get(row['status'], "")

            status_text = {
                "pending": "–û—á—ñ–∫—É—î –º–æ–¥–µ—Ä–∞—Ü—ñ—é",
                "approved": "–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ",
                "rejected": "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ",
                "sold": "–ü—Ä–æ–¥–∞–Ω–æ",
                "rotated": "–ü–æ—Ç—Ä–µ–±—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–æ—Ç–æ"
            }.get(row['status'], row['status'])

            product_info = (
                f"üì¶ {row['name']}\n"
                f"üí∞ {row['price']}\n"
                f"üìÖ {row['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                f"–°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}"
            )

            kb = InlineKeyboardMarkup(row_width=2)
            if row['status'] == "approved":
                if row['channel_message_id']:
                    kb.add(InlineKeyboardButton("üëÅ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∫–∞–Ω–∞–ª—ñ", url=f"https://t.me/c/{str(CHANNEL_ID)[4:]}/{row['channel_message_id']}"))
                kb.add(InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–∞–Ω–æ", callback_data=f"sold:{row['id']}"))
                kb.add(InlineKeyboardButton("‚úè –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data=f"editprice:{row['id']}"))
                kb.add(InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{row['id']}"))
            elif row['status'] == "pending":
                kb.add(InlineKeyboardButton("‚åõ –û—á—ñ–∫—É—î –º–æ–¥–µ—Ä–∞—Ü—ñ—é", callback_data="noop"))
                kb.add(InlineKeyboardButton("‚úè –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data=f"editprice:{row['id']}"))
                kb.add(InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{row['id']}"))
            elif row['status'] == "rotated":
                kb.add(InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"repost:{row['id']}"))
                kb.add(InlineKeyboardButton("‚úè –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data=f"editprice:{row['id']}"))
                kb.add(InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{row['id']}"))
            elif row['status'] == "sold":
                kb.add(InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–∞–Ω–æ", callback_data="noop"))
                kb.add(InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{row['id']}"))
            elif row['status'] == "rejected":
                kb.add(InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ", callback_data="noop"))
                kb.add(InlineKeyboardButton("‚úè –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data=f"editprice:{row['id']}"))
                kb.add(InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{row['id']}"))

            await message.answer(product_info, reply_markup=kb)
            logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ —Ç–æ–≤–∞—Ä {row['id']}.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–∞–Ω–æ"
@dp.callback_query_handler(lambda c: c.data.startswith("sold:"))
async def mark_sold(callback: types.CallbackQuery):
    product_id = int(callback.data.split(":")[1])
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow("SELECT * FROM products WHERE id = $1 AND user_id = $2", product_id, callback.from_user.id)
        if not row:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.", show_alert=True)
            return

        if row['status'] == 'sold':
            await callback.answer("–¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.", show_alert=True)
            return

        price_text = row['price']
        commission = 0
        try:
            # –í–∏—Ç—è–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ –∑ —Ü—ñ–Ω–∏
            price_digits = ''.join(filter(str.isdigit, price_text))
            if price_digits:
                price = int(price_digits)
                commission = max(10, round(price * 0.1)) # –ú—ñ–Ω—ñ–º—É–º 10 –≥—Ä–Ω –∫–æ–º—ñ—Å—ñ—ó
            else:
                commission = 200 # –Ø–∫—â–æ —Ü—ñ–Ω–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–¥–æ–≥–æ–≤—ñ—Ä–Ω–∞")
        except ValueError:
            commission = 200 # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ü—ñ–Ω—É –Ω–∞ —á–∏—Å–ª–æ

        await conn.execute("UPDATE products SET status = 'sold' WHERE id = $1", product_id)

    await bot.send_message(callback.from_user.id,
        f"üí∏ –ö–æ–º—ñ—Å—ñ—è 10% = {commission} –≥—Ä–Ω\nüí≥ –û–ø–ª–∞—Ç—ñ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∫—É Monobank: {MONOBANK_CARD_NUMBER}")
    await callback.answer("–¢–æ–≤–∞—Ä –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.")
    await callback.message.edit_reply_markup(reply_markup=None) # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è –¥—ñ—ó
    logging.info(f"–¢–æ–≤–∞—Ä {product_id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {callback.from_user.id}.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∏–¥–∞–ª–∏—Ç–∏"
@dp.callback_query_handler(lambda c: c.data.startswith("delete:"))
async def delete_product(callback: types.CallbackQuery):
    product_id = int(callback.data.split(":")[1])
    async with db_pool.acquire() as conn:
        await conn.execute("DELETE FROM products WHERE id = $1 AND user_id = $2", product_id, callback.from_user.id)
    await callback.message.edit_text("üóë –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await callback.answer("–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ.")
    logging.info(f"–¢–æ–≤–∞—Ä {product_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {callback.from_user.id}.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É"
@dp.callback_query_handler(lambda c: c.data.startswith("editprice:"))
async def edit_price_prompt(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split(":")[1])
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–∞–ª–µ–∂–∏—Ç—å —Ç–æ–≤–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    async with db_pool.acquire() as conn:
        product = await conn.fetchrow("SELECT id FROM products WHERE id = $1 AND user_id = $2", product_id, callback.from_user.id)
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.", show_alert=True)
            return

    await state.update_data(editing_product_id=product_id)
    await callback.message.answer("‚úè –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É (–≥—Ä–Ω, USD –∞–±–æ –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞):")
    await EditPrice.NewPrice.set()
    await callback.answer("–ì–æ—Ç—É—î–º–æ—Å—è –¥–æ –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏.")
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}.")

# –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Ü—ñ–Ω–∏
@dp.message_handler(state=EditPrice.NewPrice)
async def apply_new_price(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_id = data.get('editing_product_id')
    if not product_id:
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.finish()
        return

    new_price = message.text
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE products SET price = $1 WHERE id = $2 AND user_id = $3", new_price, product_id, message.from_user.id)
    await message.answer("üí∞ –¶—ñ–Ω—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –æ–Ω–æ–≤–∏–≤ —Ü—ñ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} –Ω–∞ {new_price}.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏"
@dp.callback_query_handler(lambda c: c.data.startswith("repost:"))
async def repost_product(callback: types.CallbackQuery):
    product_id = int(callback.data.split(":")[1])
    async with db_pool.acquire() as conn:
        product = await conn.fetchrow("SELECT repost_count, status FROM products WHERE id = $1 AND user_id = $2", product_id, callback.from_user.id)
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤.", show_alert=True)
            return

        if product['repost_count'] >= 3:
            await callback.answer("–í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ–π (3 —Ä–∞–∑–∏).", show_alert=True)
            return
        if product['status'] == 'pending':
            await callback.answer("–¢–æ–≤–∞—Ä –≤–∂–µ –æ—á—ñ–∫—É—î –º–æ–¥–µ—Ä–∞—Ü—ñ—é.", show_alert=True)
            return

        await conn.execute("UPDATE products SET status = 'pending', repost_count = repost_count + 1 WHERE id = $1 AND user_id = $2", product_id, callback.from_user.id)
    await callback.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")
    await callback.message.edit_text("üîÅ –¢–æ–≤–∞—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")
    logging.info(f"–¢–æ–≤–∞—Ä {product_id} –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {callback.from_user.id}.")

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ –ø–æ–≤—Ç–æ—Ä–Ω—É –º–æ–¥–µ—Ä–∞—Ü—ñ—é
    async with db_pool.acquire() as conn:
        reposted_product = await conn.fetchrow("SELECT * FROM products WHERE id = $1", product_id)
    if reposted_product:
        moderator_product_info = (
            f"üîÑ –¢–æ–≤–∞—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!\n\n"
            f"üì¶ –ù–∞–∑–≤–∞: {reposted_product['name']}\n"
            f"üí∞ –¶—ñ–Ω–∞: {reposted_product['price']}\n"
            f"üìù –û–ø–∏—Å: {reposted_product['description']}\n"
            f"üìç –õ–æ–∫–∞—Ü—ñ—è: {reposted_product['location']}\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {reposted_product['delivery']}\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: @{reposted_product['username']} (ID: {reposted_product['user_id']})"
        )
        moderator_keyboard = InlineKeyboardMarkup(row_width=2)
        moderator_keyboard.add(
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve:{reposted_product['user_id']}:{reposted_product['name']}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{reposted_product['user_id']}:{reposted_product['name']}")
        )
        moderator_keyboard.add(
            InlineKeyboardButton("üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ñ–æ—Ç–æ", callback_data=f"rotate:{reposted_product['user_id']}:{reposted_product['name']}")
        )

        media_group = [InputMediaPhoto(file_id) for file_id in reposted_product['photos']]
        if media_group:
            try:
                await bot.send_media_group(ADMIN_IDS[0], media_group)
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –º–µ–¥—ñ–∞–≥—Ä—É–ø–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: {e}")
                await bot.send_message(ADMIN_IDS[0], "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –º–æ–¥–µ—Ä–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—Ä—É—á–Ω—É.")

        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, moderator_product_info, reply_markup=moderator_keyboard)
            logging.info(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {admin_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≤—Ç–æ—Ä–Ω—É –º–æ–¥–µ—Ä–∞—Ü—ñ—é —Ç–æ–≤–∞—Ä—É {product_id}.")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è "noop" callback (–¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥—ñ—ó)
@dp.callback_query_handler(lambda c: c.data == "noop")
async def no_operation(callback: types.CallbackQuery):
    await callback.answer("–¶—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –º–∞—î –¥—ñ—ó.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /stats (–¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
@dp.message_handler(commands=["stats"])
async def show_stats(message: types.Message):
    async with db_pool.acquire() as conn:
        count_all = await conn.fetchval("SELECT COUNT(*) FROM products WHERE user_id = $1", message.from_user.id)
        count_pending = await conn.fetchval("SELECT COUNT(*) FROM products WHERE user_id = $1 AND status = 'pending'", message.from_user.id)
        count_approved = await conn.fetchval("SELECT COUNT(*) FROM products WHERE user_id = $1 AND status = 'approved'", message.from_user.id)
        count_sold = await conn.fetchval("SELECT COUNT(*) FROM products WHERE user_id = $1 AND status = 'sold'", message.from_user.id)
        count_rejected = await conn.fetchval("SELECT COUNT(*) FROM products WHERE user_id = $1 AND status = 'rejected'", message.from_user.id)
        count_rotated = await conn.fetchval("SELECT COUNT(*) FROM products WHERE user_id = $1 AND status = 'rotated'", message.from_user.id)

    await message.answer(
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:\n"
        f"–í—Å—å–æ–≥–æ: {count_all}\n"
        f"–û—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {count_pending}\n"
        f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {count_approved}\n"
        f"–ü—Ä–æ–¥–∞–Ω–æ: {count_sold}\n"
        f"–í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {count_rejected}\n"
        f"–ü–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–æ—Ç–æ: {count_rotated}"
    )
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Flask-–¥–æ–¥–∞—Ç–æ–∫
app = Flask(__name__)

# URL –¥–ª—è Webhook
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
# RENDER_EXTERNAL_URL –±—É–¥–µ –Ω–∞–¥–∞–Ω–æ Render.com
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL") + WEBHOOK_PATH

@app.route(WEBHOOK_PATH, methods=['POST'])
async def webhook():
    if request.method == 'POST':
        update = types.Update.to_object(request.json)
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ asyncio.create_task –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        # –¶–µ –¥–æ–∑–≤–æ–ª—è—î Flask —à–≤–∏–¥–∫–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –ø–æ–∫–∏ aiogram –æ–±—Ä–æ–±–ª—è—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        asyncio.create_task(dp.process_update(update))
        return 'ok'
    return 'not ok'

@app.route('/')
async def index():
    return 'Bot is running!'

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫–∞
async def on_startup(dispatcher):
    await init_db() # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    await bot.set_webhook(WEBHOOK_URL) # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Webhook
    logging.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {WEBHOOK_URL}")

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏ –¥–æ–¥–∞—Ç–∫–∞
async def on_shutdown(dispatcher):
    logging.warning('Shutting down..')
    await bot.delete_webhook() # –í–∏–¥–∞–ª—è—î–º–æ Webhook
    if db_pool:
        await db_pool.close() # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –ë–î
    logging.warning('Bye!')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Gunicorn (–¥–ª—è Render.com)
# –¶–µ–π –±–ª–æ–∫ `if __name__ == "__main__":` –Ω–µ –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è Gunicorn,
# –æ—Å–∫—ñ–ª—å–∫–∏ Gunicorn —ñ–º–ø–æ—Ä—Ç—É—î `app` –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ.
# –û–¥–Ω–∞–∫, –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–Ω –±—É–¥–µ –∫–æ—Ä–∏—Å–Ω–∏–º.
if __name__ == '__main__':
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ Gunicorn
    # –£ production Render.com –∑–∞–ø—É—Å–∫–∞—Ç–∏–º–µ `gunicorn app:app`
    # —ñ –≤–∏–∫–ª–∏—á–µ `on_startup` —Ç–∞ `on_shutdown` —á–µ—Ä–µ–∑ ASGI/WSGI
    # –î–ª—è Flask —Ü–µ –Ω–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, —Ç–æ–º—É on_startup
    # –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Flask.
    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_startup(dp))
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask-–¥–æ–¥–∞—Ç–æ–∫. Gunicorn –∑—Ä–æ–±–∏—Ç—å —Ü–µ –∑–∞ –Ω–∞—Å –Ω–∞ Render.com.
    # app.run(host='0.0.0.0', port=os.environ.get("PORT", 5000))
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:
    # app.run(host='0.0.0.0', port=5000)
    pass # Gunicorn –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–¥–∞—Ç–æ–∫, —Ç–æ–º—É —Ç—É—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ app.run()

