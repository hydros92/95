import logging
import os
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import InputMediaPhoto, ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from PIL import Image
from io import BytesIO
from dotenv import load_dotenv
from flask import Flask, request
import asyncio

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_IDS = [int(admin_id) for admin_id in os.getenv("ADMIN_CHAT_ID").split(',')]
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
MONOBANK_CARD_NUMBER = os.getenv("MONOBANK_CARD_NUMBER")
DATABASE_URL = os.getenv("DATABASE_URL")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db_pool = None

class CreateProduct(StatesGroup):
    Name = State()
    Price = State()
    Photos = State()
    Location = State()
    Description = State()
    Delivery = State()
    Confirm = State()

class EditPrice(StatesGroup):
    NewPrice = State()

async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(DATABASE_URL)
    async with db_pool.acquire() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS products (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                username TEXT,
                name TEXT,
                price TEXT,
                photos TEXT[],
                location TEXT,
                description TEXT,
                delivery TEXT,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                repost_count INT DEFAULT 0,
                channel_message_id BIGINT DEFAULT NULL
            );
        """)
    logging.info("DB initialized.")

async def save_product(data):
    async with db_pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO products (user_id, username, name, price, photos, location, description, delivery)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        """, data['user_id'], data['username'], data['name'], data['price'], data['photos'], data['location'], data['description'], data['delivery'])
    logging.info(f"Product '{data['name']}' saved.")

async def update_product_status(product_id, status):
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE products SET status = $1 WHERE id = $2", status, product_id)
    logging.info(f"Product {product_id} status updated to '{status}'.")

async def update_channel_message_id(product_id, message_id):
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE products SET channel_message_id = $1 WHERE id = $2", message_id, product_id)
    logging.info(f"Product {product_id} channel_message_id updated.")

async def update_rotated_photos(product_id, new_file_ids):
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE products SET photos = $1 WHERE id = $2", new_file_ids, product_id)
    logging.info(f"Product {product_id} photos updated after rotation.")

async def rotate_photos_and_notify(product):
    new_file_ids = []
    for file_id in product['photos']:
        try:
            file = await bot.get_file(file_id)
            file_path = file.file_path
            photo_bytes = await bot.download_file(file_path)
            image = Image.open(BytesIO(photo_bytes.read())).rotate(-90, expand=True)
            buf = BytesIO()
            buf.name = 'rotated.jpg'
            image.save(buf, format='JPEG')
            buf.seek(0)
            msg = await bot.send_photo(product['user_id'], buf, caption="üîÅ –ü–æ–≤–µ—Ä–Ω—É—Ç–µ —Ñ–æ—Ç–æ")
            new_file_ids.append(msg.photo[-1].file_id)
        except Exception as e:
            logging.error(f"Error rotating photo {file_id} for product {product['id']}: {e}")
            new_file_ids.append(file_id)
    await update_rotated_photos(product['id'], new_file_ids)
    await bot.send_message(product['user_id'], "üîÑ –í–∞—à —Ç–æ–≤–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ. –§–æ—Ç–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ.")
    await update_product_status(product['id'], "rotated")
    logging.info(f"User {product['user_id']} notified about photo rotation.")

@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏")
    keyboard.add("üìñ –ü—Ä–∞–≤–∏–ª–∞")
    await message.answer("üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
async def add_product(message: types.Message):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:", reply_markup=types.ReplyKeyboardRemove())
    await CreateProduct.Name.set()

@dp.message_handler(state=CreateProduct.Name)
async def set_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üí∞ –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (–≥—Ä–Ω, $ –∞–±–æ –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞):")
    await CreateProduct.Price.set()

@dp.message_handler(state=CreateProduct.Price)
async def set_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text, photos=[])
    await message.answer("üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 10 —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É (–ø–æ –æ–¥–Ω–æ–º—É):")
    await CreateProduct.Photos.set()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=CreateProduct.Photos)
async def upload_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    if len(photos) >= 10:
        await message.answer("üì∑ –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω–æ. –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å.")
        await CreateProduct.Location.set()
        return
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    await message.answer(f"‚úÖ –§–æ—Ç–æ {len(photos)} –¥–æ–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è.")

@dp.message_handler(lambda m: m.text in ["–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ", "-"], state=CreateProduct.Photos)
async def skip_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    if not photos:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É.")
        return
    await message.answer("üìç –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–±–æ '-' —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:")
    await CreateProduct.Location.set()

@dp.message_handler(state=CreateProduct.Location)
async def set_location(message: types.Message, state: FSMContext):
    location = message.text if message.text != "-" else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    await state.update_data(location=location)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")
    await CreateProduct.Description.set()

@dp.message_handler(state=CreateProduct.Description)
async def set_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–ù–∞–ª–æ–∂–∫–∞ –£–∫—Ä–ø–æ—à—Ç–∞", "–ù–∞–ª–æ–∂–∫–∞ –ù–æ–≤–∞ –ø–æ—à—Ç–∞")
    await message.answer("üöö –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)
    await CreateProduct.Delivery.set()

@dp.message_handler(state=CreateProduct.Delivery)
async def set_delivery(message: types.Message, state: FSMContext):
    await state.update_data(delivery=message.text)
    data = await state.get_data()
    confirm_text = (
        f"üì¶ –ù–∞–∑–≤–∞: {data['name']}\n"
        f"üí∞ –¶—ñ–Ω–∞: {data['price']}\n"
        f"üìç –õ–æ–∫–∞—Ü—ñ—è: {data['location']}\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery']}\n"
        f"üìù –û–ø–∏—Å: {data['description']}\n\n"
        f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é? (–¢–∞–∫/–ù—ñ)"
    )
    await message.answer(confirm_text, reply_markup=types.ReplyKeyboardRemove())
    await CreateProduct.Confirm.set()

@dp.message_handler(state=CreateProduct.Confirm)
async def confirm_post(message: types.Message, state: FSMContext):
    if message.text.lower() != "—Ç–∞–∫":
        await message.answer("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ –∑ 'üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä'.",
                             reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏", "üìñ –ü—Ä–∞–≤–∏–ª–∞"))
        await state.finish()
        return

    data = await state.get_data()
    product = data.copy()
    product['user_id'] = message.from_user.id
    product['username'] = message.from_user.username or f"id{message.from_user.id}"
    await save_product(product)
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä \"{data['name']}\" –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –û—á—ñ–∫—É–π—Ç–µ!",
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏", "üìñ –ü—Ä–∞–≤–∏–ª–∞"))
    await state.finish()

    moderator_product_info = (
        f"üÜï –ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!\n\n"
        f"üì¶ –ù–∞–∑–≤–∞: {product['name']}\n"
        f"üí∞ –¶—ñ–Ω–∞: {product['price']}\n"
        f"üìù –û–ø–∏—Å: {product['description']}\n"
        f"üìç –õ–æ–∫–∞—Ü—ñ—è: {product['location']}\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {product['delivery']}\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: @{product['username']} (ID: {product['user_id']})"
    )
    moderator_keyboard = InlineKeyboardMarkup(row_width=2)
    moderator_keyboard.add(
        InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve:{product['user_id']}:{product['name']}"),
        InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{product['user_id']}:{product['name']}")
    )
    moderator_keyboard.add(
        InlineKeyboardButton("üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ñ–æ—Ç–æ", callback_data=f"rotate:{product['user_id']}:{product['name']}")
    )

    media_group = [InputMediaPhoto(file_id) for file_id in product['photos']]
    if media_group:
        try:
            await bot.send_media_group(ADMIN_IDS[0], media_group)
        except Exception as e:
            logging.error(f"Error sending media group to moderator: {e}")
            await bot.send_message(ADMIN_IDS[0], "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—Ä—É—á–Ω—É.")
    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, moderator_product_info, reply_markup=moderator_keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith(("approve:", "reject:", "rotate:")))
async def moderator_action(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    action, user_id_str, product_name = callback.data.split(":", 2)
    user_id = int(user_id_str)

    async with db_pool.acquire() as conn:
        product = await conn.fetchrow("SELECT * FROM products WHERE user_id = $1 AND name = $2 AND status = 'pending' ORDER BY created_at DESC LIMIT 1", user_id, product_name)

    if not product:
        await callback.answer("–¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        try:
            await callback.message.edit_text(f"–¶–µ–π —Ç–æ–≤–∞—Ä ({product_name}) –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except:
            pass
        return

    if action == "approve":
        media = [InputMediaPhoto(photo) for photo in product['photos']]
        caption = (
            f"üì¶ –ù–∞–∑–≤–∞: {product['name']}\n"
            f"üí∞ –¶—ñ–Ω–∞: {product['price']}\n"
            f"üìç –î–æ—Å—Ç–∞–≤–∫–∞: {product['delivery']}\n"
            f"üìù –û–ø–∏—Å: {product['description']}\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: @{product['username']}"
        )
        if media:
            media[0].caption = caption
            media[0].parse_mode = ParseMode.HTML
            try:
                sent_messages = await bot.send_media_group(CHANNEL_ID, media)
                if sent_messages:
                    await update_channel_message_id(product['id'], sent_messages[0].message_id)
              
                await update_product_status(product['id'], 'approved')
                await callback.message.edit_text(f"‚úÖ –¢–æ–≤–∞—Ä \"{product_name}\" –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
                await bot.send_message(product['user_id'], f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä \"{product_name}\" –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ.")
            except Exception as e:
                await callback.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
        else:
            await callback.message.edit_text("‚ùå –§–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    elif action == "reject":
        await update_product_status(product['id'], 'rejected')
        await callback.message.edit_text(f"‚ùå –¢–æ–≤–∞—Ä \"{product_name}\" –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        await bot.send_message(product['user_id'], f"‚ùå –í–∞—à —Ç–æ–≤–∞—Ä \"{product_name}\" –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
    elif action == "rotate":
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤–æ—Ä–æ—Ç —Ñ–æ—Ç–æ
        await callback.message.edit_text(f"üîÑ –ü–æ–≤–µ—Ä—Ç–∞—é —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É \"{product_name}\"...")
        await rotate_photos_and_notify(product)
        await callback.message.edit_text(f"‚úÖ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä—É \"{product_name}\" –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ.")

    await callback.answer()

@dp.message_handler(lambda m: m.text == "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏")
async def list_user_products(message: types.Message):
    async with db_pool.acquire() as conn:
        products = await conn.fetch("SELECT * FROM products WHERE user_id = $1 ORDER BY created_at DESC", message.from_user.id)
    if not products:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.")
        return
    for p in products:
        status_emoji = {
            'pending': '‚è≥',
            'approved': '‚úÖ',
            'rejected': '‚ùå',
            'rotated': 'üîÑ'
        }.get(p['status'], '')
        text = (f"{status_emoji} <b>{p['name']}</b>\n"
                f"üí∞ {p['price']}\n"
                f"üìç {p['location']}\n"
                f"üöö {p['delivery']}\n"
                f"üìù {p['description']}\n"
                f"–°—Ç–∞—Ç—É—Å: {p['status']}")
        kb = InlineKeyboardMarkup()
        if p['status'] == 'approved':
            kb.add(InlineKeyboardButton("–ü—Ä–æ–¥–∞–Ω–æ ‚úÖ", callback_data=f"sold_{p['id']}"))
        kb.add(InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ñ–æ—Ç–æ üîÑ", callback_data=f"rotate_{p['id']}"))
        await message.answer(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        if p['photos']:
            for file_id in p['photos']:
                await message.answer_photo(file_id)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("rotate_"))
async def rotate_user_photo_callback(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    async with db_pool.acquire() as conn:
        product = await conn.fetchrow("SELECT * FROM products WHERE id = $1 AND user_id = $2", product_id, callback.from_user.id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É.", show_alert=True)
        return
    await callback.answer("–ü–æ–≤–µ—Ä—Ç–∞—é —Ñ–æ—Ç–æ...", show_alert=False)
    await rotate_photos_and_notify(product)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("sold_"))
async def mark_product_sold(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    async with db_pool.acquire() as conn:
        product = await conn.fetchrow("SELECT * FROM products WHERE id = $1 AND user_id = $2", product_id, callback.from_user.id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É.", show_alert=True)
        return
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–º—ñ—Å—ñ—ó 10%
    price_str = product['price'].replace(",", ".").replace(" ", "")
    commission = 0.0
    try:
        price_val = float(''.join(c for c in price_str if (c.isdigit() or c == '.')))
        commission = round(price_val * 0.10, 2)
    except Exception:
        commission = 0.0
    await update_product_status(product_id, 'sold')
    msg = (f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä \"{product['name']}\" –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.\n"
           f"–ö–æ–º—ñ—Å—ñ—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ 10%: {commission} –≥—Ä–Ω.\n"
           f"–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–ª–∞—Ç—ñ—Ç—å –∫–æ–º—ñ—Å—ñ—é –Ω–∞ –∫–∞—Ä—Ç–∫—É Monobank:\n<b>{MONOBANK_CARD_NUMBER}</b>")
    await callback.message.answer(msg, parse_mode=ParseMode.HTML)
    await callback.answer("–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.")

@dp.message_handler(lambda m: m.text == "üìñ –ü—Ä–∞–≤–∏–ª–∞")
async def show_rules(message: types.Message):
    rules_text = (
        "üìú –ü—Ä–∞–≤–∏–ª–∞ —Ä–æ–±–æ—Ç–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É:\n"
        "‚Ä¢ –ü—Ä–æ–¥–∞–≤–µ—Ü—å –æ–ø–ª–∞—á—É—î –∫–æ–º—ñ—Å—ñ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ 10% –≤—ñ–¥ –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É.\n"
        "‚Ä¢ –ü–æ–∫—É–ø–µ—Ü—å –æ–ø–ª–∞—á—É—î –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ —Å–≤–æ—ó–º –≤–∏–±–æ—Ä–æ–º.\n"
        "‚Ä¢ –ü—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–∞–Ω–æ' –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ –æ–ø–ª–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—ó.\n"
        "‚Ä¢ –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏.\n"
        "‚Ä¢ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –Ω–∞ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –º–æ–∂–ª–∏–≤–µ —á–µ—Ä–µ–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.\n"
        "–î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª, —â–æ–± —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏!"
    )
    await message.answer(rules_text)

async def on_startup(dp):
    await init_db()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")

# Flask + webhook

app = Flask(__name__)

@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = types.Update.to_object(request.get_json(force=True))
    asyncio.run(dp.process_update(update))
    return "ok", 200

if __name__ == "__main__":
    from aiogram import executor
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É polling (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    executor.start_polling(dp, on_startup=on_startup)




